
##### Customisable stuff. Set it how you like it #####

basedir   := /usr/sword

bindir    := ${basedir}/bin
libdir    := ${basedir}/lib

user      := sword
group     := sword

# Debugging options etc...
debug   := yes

#####  System specific stuff  #####

CC        = egcs
#WARNINGS  = -Wall -Wno-format -Werror # no-format since we use custom conversions
WARNINGS  = -Wall -Wno-format # no-format since we use custom conversions
CFLAGS    = -c -pipe -O3 -m486 $(WARNINGS) $(DEBUG)
CPPFLAGS  = -I${root}/include/ $(DEFINES)
LFLAGS    = $(OPTIMIZE) $(DEBUG) -L${root}../lib/

# Sorry about this bit... I do not plan to change this, either, as I see no
# point. Get a better compiler + c library if you don't have GNU!!!
DEFINES   = -D_GNU_SOURCE

ifeq ($(profile),yes)
CC       += -pg
else
CFLAGS   += -fomit-frame-pointer
endif

ifeq ($(debug),yes)
CFLAGS   += -ggdb
else
CFLAGS   += -s
DEFINES  += -DNDEBUG
endif

#------------------------------------------------------------------------------#
# You shouldn't need to change anything below here. If you do, tell us what
# you changed and what your system is, at hatman@pharaoh0.demon.co.uk.


subdir_targets := clean install dist pre targets

.PHONY: $(foreach target,${subdir_targets},just-$(target) subdir-$(target) $(target))
.PHONY: all uninstall cp

# Primary target

default: all

# Gerenal defines

version := 0.4.0

# Set up -D flags based on config

# Compilation rules

%.o: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $<
%.o: %.cpp
	$(CC) $(CPPFLAGS) $(CFLAGS) -o $@ $<

# Rules to generate dependancies

define run-depend
$(SHELL) -ec '$(CC) -MM -MG $(CPPFLAGS) $< | sed '\''s/$*\.o/& $@/g'\'' > $@'
endef

%.d: %.c
	${run-depend}
%.d: %.cpp
	${run-depend}

# Subdirectory rules

$(foreach dir,${subdirs},$(foreach target,${subdir_targets},$(dir)/$(target))):
	${MAKE} -C $(@D) just-$(@F)

$(foreach target,${subdir_targets},subdir-$(target)): subdir-%: $(foreach dir,${subdirs},$(dir)/%)

# all target

all: pre just-targets

# targets target

just-targets: subdir-targets ${targets}

targets:
	${MAKE} just-targets nodeps=no

# pre target

just-pre: subdir-pre ${pre-targets}

pre:
	${MAKE} just-pre nodeps=yes

# clean target

just-clean: subdir-clean
	rm -f *.mbr *.mbt *.exe *.lib *.dsm *.bak *.obj *.obr *.rws *.apx *.dof *.dcu *.tr *.trw *.ils *.ilf *.ilc *.ild *.tds *.mrt *.dsw *.csm *.o *.d *~ *.*~ *.~* *.s *.tga *.anim *.spr errlist core ${pre-targets} ${targets}

clean:
	${MAKE} just-clean nodeps=yes
	rm ${root}/lib/*

# install target

just-install: subdir-install
ifneq (${install-dir},)
	install -o ${user} -g ${group} -m a+rx,u+rxw -d ${libdir}/${install-dir}/
	install -o ${user} -g ${group} -m a+r,u+rw ${install-targets} ${libdir}/${install-dir}
endif
ifeq (${other-install},yes)
	${MAKE} other-install
endif
ifneq (${bin},)
	install -o root -g ${group} -m a+rx,u+rws -s ${bin} ${bindir}/
endif

install: pre targets
	${MAKE} just-install nodeps=yes

# dist target

ifeq (${other-dist},yes)
just-dist: subdir-dist other-dist
else
just-dist: subdir-dist
endif
ifneq (${install-dir},)
	install -o ${user} -g ${group} -m a+rx,u+rxw -d /tmp/hatbin${libdir}/${install-dir}/
	install -o ${user} -g ${group} -m a+r,u+rw ${install-targets} /tmp/hatbin${libdir}/${install-dir}/
endif
ifneq (${bin},)
	install -o ${user} -g ${group} -m a+rx,u+rxw -d /tmp/hatbin${bindir}/
	install -o ${user} -g ${group} -m a+rx,u+rwx -s ${bin} /tmp/hatbin${bindir}/
endif

dist: pre targets
	rm -rf /tmp/sword && mkdir -p /tmp/sword
	${MAKE} just-dist nodeps=yes
	cd /tmp/sword && tar czf /tmp/sword-${version}.bin.tgz *
	mv /tmp/hatman-${version}.bin.tgz ./
	rm -rf /tmp/sword
