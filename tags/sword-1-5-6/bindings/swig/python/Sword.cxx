/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.14u-20020903-2331
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_SWLocale swig_types[0] 
#define  SWIGTYPE_p_SWMgr swig_types[1] 
#define  SWIGTYPE_p_SWCom swig_types[2] 
#define  SWIGTYPE_p_RawLD4 swig_types[3] 
#define  SWIGTYPE_p_ListKey swig_types[4] 
#define  SWIGTYPE_p_SWKey swig_types[5] 
#define  SWIGTYPE_p_ConfigEntMap swig_types[6] 
#define  SWIGTYPE_p_p_char swig_types[7] 
#define  SWIGTYPE_p_RawLD swig_types[8] 
#define  SWIGTYPE_p_TreeKey swig_types[9] 
#define  SWIGTYPE_p_bool swig_types[10] 
#define  SWIGTYPE_p_SWFilterMgr swig_types[11] 
#define  SWIGTYPE_p_SWLD swig_types[12] 
#define  SWIGTYPE_p_SWTextDirection swig_types[13] 
#define  SWIGTYPE_p_RawText swig_types[14] 
#define  SWIGTYPE_p_f_char_p_void__void swig_types[15] 
#define  SWIGTYPE_p_VerseKey swig_types[16] 
#define  SWIGTYPE_p_ModMap swig_types[17] 
#define  SWIGTYPE_p_zCom swig_types[18] 
#define  SWIGTYPE_p_string swig_types[19] 
#define  SWIGTYPE_p_SectionMap swig_types[20] 
#define  SWIGTYPE_p_SWDisplay swig_types[21] 
#define  SWIGTYPE_p_AttributeTypeList swig_types[22] 
#define  SWIGTYPE_p_SWText swig_types[23] 
#define  SWIGTYPE_p_TreeKeyIdx swig_types[24] 
#define  SWIGTYPE_p_SWCompress swig_types[25] 
#define  SWIGTYPE_p_LZSSCompress swig_types[26] 
#define  SWIGTYPE_p_ZipCompress swig_types[27] 
#define  SWIGTYPE_p_SW_POSITION swig_types[28] 
#define  SWIGTYPE_p_SWModule swig_types[29] 
#define  SWIGTYPE_p_zLD swig_types[30] 
#define  SWIGTYPE_p_SWGenBook swig_types[31] 
#define  SWIGTYPE_p_RawCom swig_types[32] 
#define  SWIGTYPE_p_RawGenBook swig_types[33] 
#define  SWIGTYPE_p_SWConfig swig_types[34] 
#define  SWIGTYPE_p_LocaleMgr swig_types[35] 
#define  SWIGTYPE_p_int swig_types[36] 
#define  SWIGTYPE_p_SWTextMarkup swig_types[37] 
#define  SWIGTYPE_p_OptionsList swig_types[38] 
#define  SWIGTYPE_p_listTstring_t swig_types[39] 
#define  SWIGTYPE_p_zText swig_types[40] 
#define  SWIGTYPE_p_SWTextEncoding swig_types[41] 
#define  SWIGTYPE_p_unsigned_long swig_types[42] 
static swig_type_info *swig_types[44];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _Sword.so
  ------------------------------------------------*/
#define SWIG_init    init_Sword

#define SWIG_name    "_Sword"

#undef bool
#undef assert
#undef LOCAL
#undef list


 #include <stdio.h>
 #include <string>
 #include <map>
 #include <defs.h>
 #include <multimapwdef.h>

 #include "swconfig.h"
using namespace sword;


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); return NULL; }


#include <string>


#include <string>

PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o);
}
double SwigNumber_AsDouble(PyObject* o) {
    return (PyFloat_Check(o) ? PyFloat_AsDouble(o) : double(PyInt_AsLong(o)));
}
PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromString(s.c_str());
}
std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#include <vector>
#include <algorithm>
#include <stdexcept>

void SWConfig_set(SWConfig *self,char const *group,char const *entry,char const *value){
	self->Sections[group][entry] = value;
  }
char const *SWConfig_get(SWConfig *self,char const *group,char const *entry){
	return self->Sections[group][entry].c_str();
  }

#include <swmgr.h>

SWModule *SWMgr_module(SWMgr *self,char const *modulename){
  	return self->Modules[modulename];
  }

 #include "swmodule.h"

bool const SWModule_next(SWModule *self){
	(*self)++;
	return !self->Error();
  }
bool const SWModule_prev(SWModule *self){
	(*self)--;
	return !self->Error();
  }
bool const SWModule_inc(SWModule *self,int const howFar){
  	(*self)+=howFar;
	return !self->Error();
  }
bool const SWModule_dec(SWModule *self,int const howFar){
  	(*self)-=howFar;
	return !self->Error();
  }
void SWModule_setPosition(SWModule *self,SW_POSITION pos){
  	(*self) = pos;
  }
void SWModule_top(SWModule *self){
	(*self) = TOP;
  }
void SWModule_bottom(SWModule *self){
	(*self) = BOTTOM;
  }
char const *SWModule_text(SWModule *self){
  	return (const char*)*self;
  }
char const *SWModule_StripText(SWModule *self){
  	return self->StripText();
  }
void SWModule_write(SWModule *self,char const *text){
    (*self)<<text;
  }
void SWModule_writeLink(SWModule *self,SWKey const *key){
    (*self)<<key;
  }

 #include "swkey.h"

void SWKey_setPersist(SWKey *self,signed char persists){
  	self->Persist(persists);
  }
void SWKey_next(SWKey *self){
  	(*self)++;
  }
void SWKey_prev(SWKey *self){
  	(*self)++;
  }
void SWKey_setKey(SWKey *self,SWKey const *key){
  	self->copyFrom(*key);
  }

 #include "versekey.h"


#include "listkey.h"

char ListKey_SetToElement(ListKey *self,int element){
		return self->SetToElement(element, SW_POSITION(((char)1)));
	}

#include "treekey.h"


#include "treekeyidx.h"


#include <localemgr.h>

LocaleMgr *const LocaleMgr_systemLocaleMgr(){
  	return &(LocaleMgr::systemLocaleMgr);
  }

#include <swfiltermgr.h>


 #include "swtext.h"


 #include "rawtext.h"


 #include "ztext.h"


 #include "swcom.h"


 #include "rawcom.h"


 #include "zcom.h"


 #include "swgenbook.h"


 #include "rawgenbook.h"


 #include "swld.h"


 #include "rawld.h"


 #include "rawld4.h"


 #include "zld.h"


 #include <swcomprs.h>


 #include <lzsscomprs.h>


 #include <zipcomprs.h>

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_SWConfig_filename_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    string arg2 ;
    string *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWConfig_filename_set",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_string,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
    arg2 = *argp2; 
    if (arg1) (arg1)->filename = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWConfig_filename_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWConfig_filename_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result =  ((arg1)->filename);
    
    {
        string * resultptr;
        resultptr = new string((string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_string, 1);
    }
    return resultobj;
}


static PyObject *_wrap_SWConfig_Sections_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    SectionMap arg2 ;
    SectionMap *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWConfig_Sections_set",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SectionMap,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
    arg2 = *argp2; 
    if (arg1) (arg1)->Sections = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWConfig_Sections_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    SectionMap result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWConfig_Sections_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result =  ((arg1)->Sections);
    
    {
        SectionMap * resultptr;
        resultptr = new SectionMap((SectionMap &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SectionMap, 1);
    }
    return resultobj;
}


static PyObject *_wrap_new_SWConfig(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    SWConfig *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_SWConfig",&arg1)) return NULL;
    result = (SWConfig *)new SWConfig((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWConfig, 1);
    return resultobj;
}


static PyObject *_wrap_delete_SWConfig(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWConfig",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWConfig_Load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWConfig_Load",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Load();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWConfig_Save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWConfig_Save",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Save();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWConfig_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    char *arg2 ;
    char *arg3 ;
    char *arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Osss:SWConfig_set",&obj0,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWConfig_set(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWConfig_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 ;
    char *arg2 ;
    char *arg3 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:SWConfig_get",&obj0,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)SWConfig_get(arg1,(char const *)arg2,(char const *)arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject * SWConfig_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWConfig, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_SWMgr_findConfig(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char **arg2 ;
    char **arg3 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sOO:SWMgr_findConfig",&arg1,&obj1,&obj2)) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_p_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_p_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWMgr::findConfig(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_config_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    SWConfig *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWMgr_config_set",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) return NULL;
    if (arg1) (arg1)->config = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_config_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    SWConfig *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_config_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWConfig *) ((arg1)->config);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWConfig, 0);
    return resultobj;
}


static PyObject *_wrap_SWMgr_sysconfig_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    SWConfig *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWMgr_sysconfig_set",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) return NULL;
    if (arg1) (arg1)->sysconfig = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_sysconfig_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    SWConfig *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_sysconfig_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWConfig *) ((arg1)->sysconfig);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWConfig, 0);
    return resultobj;
}


static PyObject *_wrap_SWMgr_Modules_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    ModMap arg2 ;
    ModMap *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWMgr_Modules_set",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_ModMap,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
    arg2 = *argp2; 
    if (arg1) (arg1)->Modules = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_Modules_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    ModMap result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_Modules_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result =  ((arg1)->Modules);
    
    {
        ModMap * resultptr;
        resultptr = new ModMap((ModMap &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_ModMap, 1);
    }
    return resultobj;
}


static PyObject *_wrap_SWMgr_prefixPath_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWMgr_prefixPath_set",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    {
        if (arg1->prefixPath) delete [] arg1->prefixPath;
        arg1->prefixPath = (char *) (new char[strlen(arg2)+1]);
        strcpy((char *) arg1->prefixPath,arg2);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_prefixPath_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_prefixPath_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *) ((arg1)->prefixPath);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWMgr_configPath_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWMgr_configPath_set",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    {
        if (arg1->configPath) delete [] arg1->configPath;
        arg1->configPath = (char *) (new char[strlen(arg2)+1]);
        strcpy((char *) arg1->configPath,arg2);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_configPath_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_configPath_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *) ((arg1)->configPath);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_new_SWMgr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWConfig *arg1 = 0 ;
    SWConfig *arg2 = 0 ;
    bool arg3 = true ;
    SWFilterMgr *arg4 = 0 ;
    SWMgr *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|OOOO:new_SWMgr",&obj0,&obj1,&obj2,&obj3)) return NULL;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWConfig,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) return NULL;
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_SWFilterMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    result = (SWMgr *)new SWMgr(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWMgr, 1);
    return resultobj;
}


static PyObject *_wrap_delete_SWMgr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWMgr",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_Load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    signed char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_Load",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (signed char)(arg1)->Load();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWMgr_setGlobalOption(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    char *arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:SWMgr_setGlobalOption",&obj0,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->setGlobalOption((char const *)arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWMgr_getGlobalOption(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWMgr_getGlobalOption",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->getGlobalOption((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWMgr_getGlobalOptionTip(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWMgr_getGlobalOptionTip",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->getGlobalOptionTip((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWMgr_getGlobalOptions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    OptionsList result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWMgr_getGlobalOptions",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (arg1)->getGlobalOptions();
    
    {
        OptionsList * resultptr;
        resultptr = new OptionsList((OptionsList &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_OptionsList, 1);
    }
    return resultobj;
}


static PyObject *_wrap_SWMgr_getGlobalOptionValues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    OptionsList result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWMgr_getGlobalOptionValues",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (arg1)->getGlobalOptionValues((char const *)arg2);
    
    {
        OptionsList * resultptr;
        resultptr = new OptionsList((OptionsList &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_OptionsList, 1);
    }
    return resultobj;
}


static PyObject *_wrap_SWMgr_setCipherKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    char *arg3 ;
    signed char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:SWMgr_setCipherKey",&obj0,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (signed char)(arg1)->setCipherKey((char const *)arg2,(char const *)arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWMgr_module(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWMgr *arg1 ;
    char *arg2 ;
    SWModule *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWMgr_module",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWModule *)SWMgr_module(arg1,(char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWModule, 0);
    return resultobj;
}


static PyObject * SWMgr_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWMgr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_SWModule_terminateSearch_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWModule_terminateSearch_set",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) return NULL;
    if (arg1) (arg1)->terminateSearch = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_terminateSearch_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_terminateSearch_get",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool) ((arg1)->terminateSearch);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_SWModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    char *arg2 = 0 ;
    SWDisplay *arg3 = 0 ;
    char *arg4 = 0 ;
    SWTextEncoding arg5 = ENC_UNKNOWN ;
    SWTextDirection arg6 = DIRECTION_LTR ;
    SWTextMarkup arg7 = FMT_UNKNOWN ;
    char *arg8 = 0 ;
    SWModule *result;
    SWTextEncoding *argp5 ;
    SWTextDirection *argp6 ;
    SWTextMarkup *argp7 ;
    PyObject * obj2  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|ssOsOOOs:new_SWModule",&arg1,&arg2,&obj2,&arg4,&obj4,&obj5,&obj6,&arg8)) return NULL;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    result = (SWModule *)new SWModule((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWModule, 1);
    return resultobj;
}


static PyObject *_wrap_SWModule_Error(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_Error",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Error();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWModule_isUnicode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_isUnicode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)((SWModule const *)arg1)->isUnicode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_getConfig(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    ConfigEntMap *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_getConfig",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    ConfigEntMap const &_result_ref = ((SWModule const *)arg1)->getConfig();
    result = (ConfigEntMap *) &_result_ref;
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ConfigEntMap, 0);
    return resultobj;
}


static PyObject *_wrap_SWModule_getConfigEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWModule_getConfigEntry",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((SWModule const *)arg1)->getConfigEntry((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_SetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    SWKey *arg2 ;
    char result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWModule_SetKey",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->SetKey((SWKey const *)arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWModule_Key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    SWKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_Key",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWKey &_result_ref = ((SWModule const *)arg1)->Key();
    result = (SWKey *) &_result_ref;
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 0);
    return resultobj;
}


static PyObject *_wrap_SWModule_CreateKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    SWKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_CreateKey",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWKey *)(arg1)->CreateKey();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 0);
    return resultobj;
}


static PyObject *_wrap_SWModule_KeyText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:SWModule_KeyText",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->KeyText((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_Display(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_Display",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Display();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWModule_nullPercent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char arg1 ;
    void *arg2 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"cO:SWModule_nullPercent",&arg1,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWModule::nullPercent(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_Search(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 ;
    int arg3 = 0 ;
    int arg4 = 0 ;
    SWKey *arg5 = 0 ;
    bool *arg6 = 0 ;
    void (*arg7)(char,void *) = &SWModule::nullPercent ;
    void *arg8 = 0 ;
    ListKey *result;
    PyObject * obj0  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    PyObject * obj7  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|iiOOOO:SWModule_Search",&obj0,&arg2,&arg3,&arg4,&obj4,&obj5,&obj6,&obj7)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &arg7, SWIGTYPE_p_f_char_p_void__void,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj7) {
        if ((SWIG_ConvertPtr(obj7,(void **) &arg8, 0, SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    ListKey &_result_ref = (arg1)->Search((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    result = (ListKey *) &_result_ref;
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ListKey, 0);
    return resultobj;
}


static PyObject *_wrap_SWModule_createSearchFramework(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    signed char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_createSearchFramework",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (signed char)(arg1)->createSearchFramework();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_hasSearchFramework(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_hasSearchFramework",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->hasSearchFramework();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_isSearchOptimallySupported(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 ;
    int arg3 ;
    int arg4 ;
    SWKey *arg5 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj4  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiiO:SWModule_isSearchOptimallySupported",&obj0,&arg2,&arg3,&arg4,&obj4)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->isSearchOptimallySupported((char const *)arg2,arg3,arg4,arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_next",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)SWModule_next(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_prev(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_prev",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)SWModule_prev(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_inc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    int arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SWModule_inc",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)SWModule_inc(arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_dec(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    int arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SWModule_dec",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)SWModule_dec(arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_setPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    SwigValueWrapper< SW_POSITION > arg2 ;
    SW_POSITION *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWModule_setPosition",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SW_POSITION,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
    arg2 = *argp2; 
    SWModule_setPosition(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_top(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_top",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWModule_top(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_bottom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_bottom",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWModule_bottom(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_text",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)SWModule_text(arg1);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_StripText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_StripText",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)SWModule_StripText(arg1);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_getRawEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_getRawEntry",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->getRawEntry();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_setSkipConsecutiveLinks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWModule_setSkipConsecutiveLinks",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) return NULL;
    (arg1)->setSkipConsecutiveLinks(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_getSkipConsecutiveLinks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_getSkipConsecutiveLinks",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->getSkipConsecutiveLinks();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_getEntryAttributes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    AttributeTypeList *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_getEntryAttributes",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    AttributeTypeList &_result_ref = ((SWModule const *)arg1)->getEntryAttributes();
    result = (AttributeTypeList *) &_result_ref;
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_AttributeTypeList, 0);
    return resultobj;
}


static PyObject *_wrap_SWModule_processEntryAttributes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWModule_processEntryAttributes",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) return NULL;
    ((SWModule const *)arg1)->processEntryAttributes(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_isProcessEntryAttributes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_isProcessEntryAttributes",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)((SWModule const *)arg1)->isProcessEntryAttributes();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:SWModule_Name",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->Name((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_Description(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:SWModule_Description",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->Description((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_Type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:SWModule_Type",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->Type((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_Direction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    signed char arg2 = -1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|b:SWModule_Direction",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Direction(arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWModule_Encoding(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    signed char arg2 = -1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|b:SWModule_Encoding",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Encoding(arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWModule_Markup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    signed char arg2 = -1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|b:SWModule_Markup",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Markup(arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWModule_Lang(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:SWModule_Lang",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->Lang((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWModule_isWritable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_isWritable",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->isWritable();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    signed char result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:SWModule_createModule",&arg1)) return NULL;
    result = (signed char)SWModule::createModule((char const *)arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWModule_setEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 ;
    long arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Osl:SWModule_setEntry",&obj0,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->setEntry((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_deleteEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWModule_deleteEntry",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->deleteEntry();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWModule_write",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWModule_write(arg1,(char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWModule_writeLink(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    SWKey *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWModule_writeLink",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWModule_writeLink(arg1,(SWKey const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_SWModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWModule *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWModule",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * SWModule_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWModule, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SW_POSITION(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char arg1 ;
    SW_POSITION *result;
    
    if(!PyArg_ParseTuple(args,(char *)"c:new_SW_POSITION",&arg1)) return NULL;
    result = (SW_POSITION *)new SW_POSITION(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SW_POSITION, 1);
    return resultobj;
}


static PyObject *_wrap_delete_SW_POSITION(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SW_POSITION *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SW_POSITION",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SW_POSITION,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * SW_POSITION_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SW_POSITION, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SWKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    SWKey *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_SWKey",&arg1)) return NULL;
    result = (SWKey *)new SWKey((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 1);
    return resultobj;
}


static PyObject *_wrap_SWKey_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    SWKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_clone",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWKey *)((SWKey const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 0);
    return resultobj;
}


static PyObject *_wrap_SWKey_Persist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_Persist",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)((SWKey const *)arg1)->Persist();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWKey_setPersist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    signed char arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ob:SWKey_setPersist",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWKey_setPersist(arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWKey_Error(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_Error",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Error();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWKey_setText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SWKey_setText",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->setText((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWKey_getText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_getText",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((SWKey const *)arg1)->getText();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWKey_getShortText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_getShortText",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((SWKey const *)arg1)->getShortText();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWKey_compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    SWKey *arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWKey_compare",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (int)(arg1)->compare((SWKey const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWKey_equals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    SWKey *arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWKey_equals",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->equals((SWKey const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWKey_decrement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    int arg2 = 1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:SWKey_decrement",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->decrement(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWKey_increment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    int arg2 = 1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:SWKey_increment",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->increment(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWKey_Traversable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_Traversable",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Traversable();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_SWKey_Index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_Index",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (long)((SWKey const *)arg1)->Index();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWKey_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_next",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWKey_next(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWKey_prev(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWKey_prev",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWKey_prev(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWKey_setKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    SWKey *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SWKey_setKey",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    SWKey_setKey(arg1,(SWKey const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_SWKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWKey",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * SWKey_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWKey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_VerseKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    VerseKey *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_VerseKey",&arg1)) return NULL;
    result = (VerseKey *)new VerseKey((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_VerseKey, 1);
    return resultobj;
}


static PyObject *_wrap_delete_VerseKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_VerseKey",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_VerseKey_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    SWKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_clone",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWKey *)((VerseKey const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 0);
    return resultobj;
}


static PyObject *_wrap_VerseKey_LowerBound(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    VerseKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_LowerBound",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    VerseKey &_result_ref = ((VerseKey const *)arg1)->LowerBound();
    result = (VerseKey *) &_result_ref;
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_VerseKey, 0);
    return resultobj;
}


static PyObject *_wrap_VerseKey_UpperBound(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    VerseKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_UpperBound",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    VerseKey &_result_ref = ((VerseKey const *)arg1)->UpperBound();
    result = (VerseKey *) &_result_ref;
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_VerseKey, 0);
    return resultobj;
}


static PyObject *_wrap_VerseKey_ClearBounds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_ClearBounds",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->ClearBounds();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_VerseKey_decrement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:VerseKey_decrement",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->decrement(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_VerseKey_increment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:VerseKey_increment",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->increment(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_VerseKey_Traversable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_Traversable",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Traversable();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_getBookName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_getBookName",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((VerseKey const *)arg1)->getBookName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_VerseKey_getBookAbbrev(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_getBookAbbrev",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((VerseKey const *)arg1)->getBookAbbrev();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_VerseKey_Testament(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_Testament",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)((VerseKey const *)arg1)->Testament();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_Book(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_Book",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)((VerseKey const *)arg1)->Book();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_Chapter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_Chapter",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (int)((VerseKey const *)arg1)->Chapter();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_Verse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_Verse",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (int)((VerseKey const *)arg1)->Verse();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_Normalize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char arg2 = 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|c:VerseKey_Normalize",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Normalize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_VerseKey_AutoNormalize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char arg2 = MAXPOS(char) ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|c:VerseKey_AutoNormalize",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->AutoNormalize(arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_Headings(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char arg2 = MAXPOS(char) ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|c:VerseKey_Headings",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Headings(arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_getOSISRef(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_getOSISRef",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((VerseKey const *)arg1)->getOSISRef();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_VerseKey_compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    SWKey *arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VerseKey_compare",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (int)(arg1)->compare((SWKey const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_VerseKey__compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    VerseKey *arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VerseKey__compare",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (int)(arg1)->_compare((VerseKey const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_VerseKey_setLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VerseKey_setLocale",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->setLocale((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_VerseKey_getLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VerseKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VerseKey_getLocale",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VerseKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((VerseKey const *)arg1)->getLocale();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject * VerseKey_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_VerseKey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ListKey__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    ListKey *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_ListKey",&arg1)) return NULL;
    result = (ListKey *)new ListKey((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ListKey, 1);
    return resultobj;
}


static PyObject *_wrap_new_ListKey__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    ListKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ListKey",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (ListKey *)new ListKey((ListKey const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ListKey, 1);
    return resultobj;
}


static PyObject *_wrap_new_ListKey(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _m = 1;
        int _v = 1;
        if (argc > 0) {
            {
                _v = PyString_Check(argv[0]) ? 1 : 0;
            }
            _m &= _v;
        }
        if (_m && _v) {
            return _wrap_new_ListKey__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _m = 1;
        int _v = 1;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_ListKey, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        _m &= _v;
        if (_m && _v) {
            return _wrap_new_ListKey__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_ListKey'");
    return NULL;
}


static PyObject *_wrap_delete_ListKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ListKey",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_clone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    SWKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListKey_clone",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWKey *)((ListKey const *)arg1)->clone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 0);
    return resultobj;
}


static PyObject *_wrap_ListKey_ClearList(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListKey_ClearList",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->ClearList();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_Count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListKey_Count",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (int)(arg1)->Count();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_ListKey_Remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListKey_Remove",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Remove();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_SetToElement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    int arg2 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:ListKey_SetToElement",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)ListKey_SetToElement(arg1,arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_ListKey_GetElement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    int arg2 = -1 ;
    SWKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:ListKey_GetElement",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWKey *)(arg1)->GetElement(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWKey, 0);
    return resultobj;
}


static PyObject *_wrap_ListKey_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    SWKey *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ListKey_add",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SWKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->add((SWKey const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_copyFrom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    ListKey *arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ListKey_copyFrom",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->copyFrom((ListKey const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_setPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    SwigValueWrapper< SW_POSITION > arg2 ;
    SW_POSITION *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ListKey_setPosition",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SW_POSITION,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
    arg2 = *argp2; 
    (arg1)->setPosition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_decrement(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:ListKey_decrement",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->decrement(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_increment(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:ListKey_increment",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->increment(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ListKey_Traversable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListKey_Traversable",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Traversable();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_ListKey_Index__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListKey_Index",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (long)((ListKey const *)arg1)->Index();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_ListKey_Index__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListKey *arg1 ;
    long arg2 ;
    long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:ListKey_Index",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (long)(arg1)->Index(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_ListKey_Index(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _m = 1;
        int _v = 1;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_ListKey, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        _m &= _v;
        if (_m && _v) {
            return _wrap_ListKey_Index__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _m = 1;
        int _v = 1;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_ListKey, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        _m &= _v;
        {
            _v = PyInt_Check(argv[1]) ? 1 : 0;
        }
        _m &= _v;
        if (_m && _v) {
            return _wrap_ListKey_Index__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'ListKey_Index'");
    return NULL;
}


static PyObject * ListKey_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ListKey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_TreeKey_getLocalName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_getLocalName",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->getLocalName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_TreeKey_setLocalName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    char *arg2 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:TreeKey_setLocalName",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->setLocalName((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_TreeKey_getUserData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    int *arg2 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:TreeKey_getUserData",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    result = (char *)(arg1)->getUserData(arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_TreeKey_setUserData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    char *arg2 ;
    int arg3 = 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|i:TreeKey_setUserData",&obj0,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->setUserData((char const *)arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_getFullName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_getFullName",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)((TreeKey const *)arg1)->getFullName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_TreeKey_root(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_root",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->root();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_parent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_parent",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->parent();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_firstChild(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_firstChild",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->firstChild();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_nextSibling(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_nextSibling",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->nextSibling();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_previousSibling(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_previousSibling",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->previousSibling();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_hasChildren(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_hasChildren",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (bool)(arg1)->hasChildren();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_append",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->append();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_appendChild(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_appendChild",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->appendChild();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_insertBefore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_insertBefore",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->insertBefore();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_remove",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->remove();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_setOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    unsigned long arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TreeKey_setOffset",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    arg2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) return NULL;
    (arg1)->setOffset(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_getOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_getOffset",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (unsigned long)((TreeKey const *)arg1)->getOffset();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_setPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    SwigValueWrapper< SW_POSITION > arg2 ;
    SW_POSITION *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TreeKey_setPosition",&obj0,&obj1)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SW_POSITION,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
    arg2 = *argp2; 
    (arg1)->setPosition(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_TreeKey_Traversable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    char result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_Traversable",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char)(arg1)->Traversable();
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_TreeKey_Index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TreeKey *arg1 ;
    long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TreeKey_Index",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TreeKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (long)((TreeKey const *)arg1)->Index();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject * TreeKey_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TreeKey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * TreeKeyIdx_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TreeKeyIdx, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LocaleMgr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    LocaleMgr *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_LocaleMgr",&arg1)) return NULL;
    result = (LocaleMgr *)new LocaleMgr((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_LocaleMgr, 1);
    return resultobj;
}


static PyObject *_wrap_delete_LocaleMgr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LocaleMgr *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LocaleMgr",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LocaleMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_LocaleMgr_getLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LocaleMgr *arg1 ;
    char *arg2 ;
    SWLocale *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:LocaleMgr_getLocale",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LocaleMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (SWLocale *)(arg1)->getLocale((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWLocale, 0);
    return resultobj;
}


static PyObject *_wrap_LocaleMgr_getAvailableLocales(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LocaleMgr *arg1 ;
    list<string > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LocaleMgr_getAvailableLocales",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LocaleMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (arg1)->getAvailableLocales();
    
    {
        list<string > * resultptr;
        resultptr = new list<string >((list<string > &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_listTstring_t, 1);
    }
    return resultobj;
}


static PyObject *_wrap_LocaleMgr_getDefaultLocaleName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LocaleMgr *arg1 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LocaleMgr_getDefaultLocaleName",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LocaleMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->getDefaultLocaleName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_LocaleMgr_setDefaultLocaleName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LocaleMgr *arg1 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:LocaleMgr_setDefaultLocaleName",&obj0,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LocaleMgr,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->setDefaultLocaleName((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_LocaleMgr_systemLocaleMgr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LocaleMgr *result;
    
    if(!PyArg_ParseTuple(args,(char *)":LocaleMgr_systemLocaleMgr")) return NULL;
    result = (LocaleMgr *)LocaleMgr_systemLocaleMgr();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_LocaleMgr, 0);
    return resultobj;
}


static PyObject * LocaleMgr_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_LocaleMgr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * SWFilterMgr_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWFilterMgr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SWText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    char *arg2 = 0 ;
    SWDisplay *arg3 = 0 ;
    SWTextEncoding arg4 = ENC_UNKNOWN ;
    SWTextDirection arg5 = DIRECTION_LTR ;
    SWTextMarkup arg6 = FMT_UNKNOWN ;
    char *arg7 = 0 ;
    SWText *result;
    SWTextEncoding *argp4 ;
    SWTextDirection *argp5 ;
    SWTextMarkup *argp6 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|ssOOOOs:new_SWText",&arg1,&arg2,&obj2,&obj3,&obj4,&obj5,&arg7)) return NULL;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &argp4, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg4 = *argp4; 
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    result = (SWText *)new SWText((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWText, 1);
    return resultobj;
}


static PyObject *_wrap_delete_SWText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWText *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWText",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWText,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * SWText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RawText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    SWDisplay *arg4 = 0 ;
    SWTextEncoding arg5 = ENC_UNKNOWN ;
    SWTextDirection arg6 = DIRECTION_LTR ;
    SWTextMarkup arg7 = FMT_UNKNOWN ;
    char *arg8 = 0 ;
    RawText *result;
    SWTextEncoding *argp5 ;
    SWTextDirection *argp6 ;
    SWTextMarkup *argp7 ;
    PyObject * obj3  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|ssOOOOs:new_RawText",&arg1,&arg2,&arg3,&obj3,&obj4,&obj5,&obj6,&arg8)) return NULL;
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    result = (RawText *)new RawText((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RawText, 1);
    return resultobj;
}


static PyObject *_wrap_RawText_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:RawText_createModule",&arg1)) return NULL;
    result = (char)RawText::createModule((char const *)arg1);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject *_wrap_delete_RawText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RawText *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RawText",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RawText,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * RawText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RawText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_zText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    int arg4 = CHAPTERBLOCKS ;
    SWCompress *arg5 = 0 ;
    SWDisplay *arg6 = 0 ;
    SWTextEncoding arg7 = ENC_UNKNOWN ;
    SWTextDirection arg8 = DIRECTION_LTR ;
    SWTextMarkup arg9 = FMT_UNKNOWN ;
    char *arg10 = 0 ;
    zText *result;
    SWTextEncoding *argp7 ;
    SWTextDirection *argp8 ;
    SWTextMarkup *argp9 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    PyObject * obj7  = 0 ;
    PyObject * obj8  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|ssiOOOOOs:new_zText",&arg1,&arg2,&arg3,&arg4,&obj4,&obj5,&obj6,&obj7,&obj8,&arg10)) return NULL;
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    if (obj7) {
        if ((SWIG_ConvertPtr(obj7,(void **) &argp8, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg8 = *argp8; 
    }
    if (obj8) {
        if ((SWIG_ConvertPtr(obj8,(void **) &argp9, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg9 = *argp9; 
    }
    result = (zText *)new zText((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,(char const *)arg10);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_zText, 1);
    return resultobj;
}


static PyObject *_wrap_delete_zText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    zText *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_zText",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_zText,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_zText_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    char result;
    
    if(!PyArg_ParseTuple(args,(char *)"si:zText_createModule",&arg1,&arg2)) return NULL;
    result = (char)zText::createModule((char const *)arg1,arg2);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject * zText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_zText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * SWCom_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWCom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * RawCom_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RawCom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * zCom_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_zCom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * SWGenBook_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWGenBook, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RawGenBook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    SWDisplay *arg4 = 0 ;
    SWTextEncoding arg5 = ENC_UNKNOWN ;
    SWTextDirection arg6 = DIRECTION_LTR ;
    SWTextMarkup arg7 = FMT_UNKNOWN ;
    char *arg8 = 0 ;
    RawGenBook *result;
    SWTextEncoding *argp5 ;
    SWTextDirection *argp6 ;
    SWTextMarkup *argp7 ;
    PyObject * obj3  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|ssOOOOs:new_RawGenBook",&arg1,&arg2,&arg3,&obj3,&obj4,&obj5,&obj6,&arg8)) return NULL;
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    result = (RawGenBook *)new RawGenBook((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RawGenBook, 1);
    return resultobj;
}


static PyObject *_wrap_delete_RawGenBook(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RawGenBook *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RawGenBook",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RawGenBook,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_RawGenBook_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:RawGenBook_createModule",&arg1)) return NULL;
    result = (char)RawGenBook::createModule((char const *)arg1);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject * RawGenBook_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RawGenBook, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SWLD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = 0 ;
    char *arg2 = 0 ;
    SWDisplay *arg3 = 0 ;
    SWTextEncoding arg4 = ENC_UNKNOWN ;
    SWTextDirection arg5 = DIRECTION_LTR ;
    SWTextMarkup arg6 = FMT_UNKNOWN ;
    char *arg7 = 0 ;
    SWLD *result;
    SWTextEncoding *argp4 ;
    SWTextDirection *argp5 ;
    SWTextMarkup *argp6 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|ssOOOOs:new_SWLD",&arg1,&arg2,&obj2,&obj3,&obj4,&obj5,&arg7)) return NULL;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &argp4, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg4 = *argp4; 
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    result = (SWLD *)new SWLD((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWLD, 1);
    return resultobj;
}


static PyObject *_wrap_delete_SWLD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWLD *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWLD",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWLD,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * SWLD_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWLD, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RawLD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    SWDisplay *arg4 = 0 ;
    SWTextEncoding arg5 = ENC_UNKNOWN ;
    SWTextDirection arg6 = DIRECTION_LTR ;
    SWTextMarkup arg7 = FMT_UNKNOWN ;
    char *arg8 = 0 ;
    RawLD *result;
    SWTextEncoding *argp5 ;
    SWTextDirection *argp6 ;
    SWTextMarkup *argp7 ;
    PyObject * obj3  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|ssOOOOs:new_RawLD",&arg1,&arg2,&arg3,&obj3,&obj4,&obj5,&obj6,&arg8)) return NULL;
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    result = (RawLD *)new RawLD((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RawLD, 1);
    return resultobj;
}


static PyObject *_wrap_delete_RawLD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RawLD *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RawLD",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RawLD,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_RawLD_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:RawLD_createModule",&arg1)) return NULL;
    result = (char)RawLD::createModule((char const *)arg1);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject * RawLD_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RawLD, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RawLD4(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    SWDisplay *arg4 = 0 ;
    SWTextEncoding arg5 = ENC_UNKNOWN ;
    SWTextDirection arg6 = DIRECTION_LTR ;
    SWTextMarkup arg7 = FMT_UNKNOWN ;
    char *arg8 = 0 ;
    RawLD4 *result;
    SWTextEncoding *argp5 ;
    SWTextDirection *argp6 ;
    SWTextMarkup *argp7 ;
    PyObject * obj3  = 0 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|ssOOOOs:new_RawLD4",&arg1,&arg2,&arg3,&obj3,&obj4,&obj5,&obj6,&arg8)) return NULL;
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &argp5, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg5 = *argp5; 
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &argp6, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg6 = *argp6; 
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    result = (RawLD4 *)new RawLD4((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RawLD4, 1);
    return resultobj;
}


static PyObject *_wrap_delete_RawLD4(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RawLD4 *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RawLD4",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RawLD4,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_RawLD4_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:RawLD4_createModule",&arg1)) return NULL;
    result = (char)RawLD4::createModule((char const *)arg1);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject * RawLD4_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RawLD4, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_zLD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 = 0 ;
    char *arg3 = 0 ;
    long arg4 = 200 ;
    SWCompress *arg5 = 0 ;
    SWDisplay *arg6 = 0 ;
    SWTextEncoding arg7 = ENC_UNKNOWN ;
    SWTextDirection arg8 = DIRECTION_LTR ;
    SWTextMarkup arg9 = FMT_UNKNOWN ;
    char *arg10 = 0 ;
    zLD *result;
    SWTextEncoding *argp7 ;
    SWTextDirection *argp8 ;
    SWTextMarkup *argp9 ;
    PyObject * obj4  = 0 ;
    PyObject * obj5  = 0 ;
    PyObject * obj6  = 0 ;
    PyObject * obj7  = 0 ;
    PyObject * obj8  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|sslOOOOOs:new_zLD",&arg1,&arg2,&arg3,&arg4,&obj4,&obj5,&obj6,&obj7,&obj8,&arg10)) return NULL;
    if (obj4) {
        if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj5) {
        if ((SWIG_ConvertPtr(obj5,(void **) &arg6, SWIGTYPE_p_SWDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    if (obj6) {
        if ((SWIG_ConvertPtr(obj6,(void **) &argp7, SWIGTYPE_p_SWTextEncoding,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg7 = *argp7; 
    }
    if (obj7) {
        if ((SWIG_ConvertPtr(obj7,(void **) &argp8, SWIGTYPE_p_SWTextDirection,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg8 = *argp8; 
    }
    if (obj8) {
        if ((SWIG_ConvertPtr(obj8,(void **) &argp9, SWIGTYPE_p_SWTextMarkup,SWIG_POINTER_EXCEPTION) == -1)) return NULL;
        arg9 = *argp9; 
    }
    result = (zLD *)new zLD((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,(char const *)arg10);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_zLD, 1);
    return resultobj;
}


static PyObject *_wrap_delete_zLD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    zLD *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_zLD",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_zLD,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_zLD_createModule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:zLD_createModule",&arg1)) return NULL;
    result = (char)zLD::createModule((char const *)arg1);
    
    resultobj = Py_BuildValue((char*)"c",result);
    return resultobj;
}


static PyObject * zLD_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_zLD, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SWCompress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SWCompress")) return NULL;
    result = (SWCompress *)new SWCompress();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SWCompress, 1);
    return resultobj;
}


static PyObject *_wrap_delete_SWCompress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SWCompress",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWCompress_Buf(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    char *arg2 = 0 ;
    unsigned long *arg3 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|sO:SWCompress_Buf",&obj0,&arg2,&obj2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_unsigned_long,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    }
    result = (char *)(arg1)->Buf((char const *)arg2,arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWCompress_zBuf(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    unsigned long *arg2 ;
    char *arg3 = 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|s:SWCompress_zBuf",&obj0,&obj1,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_unsigned_long,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    result = (char *)(arg1)->zBuf(arg2,arg3);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
}


static PyObject *_wrap_SWCompress_GetChars(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    char *arg2 ;
    unsigned long arg3 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:SWCompress_GetChars",&obj0,&arg2,&obj2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    arg3 = (unsigned long) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) return NULL;
    result = (unsigned long)(arg1)->GetChars(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWCompress_SendChars(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    char *arg2 ;
    unsigned long arg3 ;
    unsigned long result;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:SWCompress_SendChars",&obj0,&arg2,&obj2)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    arg3 = (unsigned long) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) return NULL;
    result = (unsigned long)(arg1)->SendChars(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_SWCompress_Encode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWCompress_Encode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Encode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_SWCompress_Decode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SWCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SWCompress_Decode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SWCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Decode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * SWCompress_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SWCompress, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LZSSCompress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LZSSCompress *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LZSSCompress")) return NULL;
    result = (LZSSCompress *)new LZSSCompress();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_LZSSCompress, 1);
    return resultobj;
}


static PyObject *_wrap_delete_LZSSCompress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LZSSCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LZSSCompress",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LZSSCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_LZSSCompress_Encode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LZSSCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LZSSCompress_Encode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LZSSCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Encode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_LZSSCompress_Decode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LZSSCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LZSSCompress_Decode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LZSSCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Decode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * LZSSCompress_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_LZSSCompress, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ZipCompress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ZipCompress *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ZipCompress")) return NULL;
    result = (ZipCompress *)new ZipCompress();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ZipCompress, 1);
    return resultobj;
}


static PyObject *_wrap_delete_ZipCompress(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ZipCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ZipCompress",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ZipCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ZipCompress_Encode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ZipCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ZipCompress_Encode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ZipCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Encode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_ZipCompress_Decode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ZipCompress *arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ZipCompress_Decode",&obj0)) return NULL;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ZipCompress,SWIG_POINTER_EXCEPTION | 0 )) == -1) return NULL;
    (arg1)->Decode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
}


static PyObject * ZipCompress_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ZipCompress, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"SWConfig_filename_set", _wrap_SWConfig_filename_set, METH_VARARGS },
	 { (char *)"SWConfig_filename_get", _wrap_SWConfig_filename_get, METH_VARARGS },
	 { (char *)"SWConfig_Sections_set", _wrap_SWConfig_Sections_set, METH_VARARGS },
	 { (char *)"SWConfig_Sections_get", _wrap_SWConfig_Sections_get, METH_VARARGS },
	 { (char *)"new_SWConfig", _wrap_new_SWConfig, METH_VARARGS },
	 { (char *)"delete_SWConfig", _wrap_delete_SWConfig, METH_VARARGS },
	 { (char *)"SWConfig_Load", _wrap_SWConfig_Load, METH_VARARGS },
	 { (char *)"SWConfig_Save", _wrap_SWConfig_Save, METH_VARARGS },
	 { (char *)"SWConfig_set", _wrap_SWConfig_set, METH_VARARGS },
	 { (char *)"SWConfig_get", _wrap_SWConfig_get, METH_VARARGS },
	 { (char *)"SWConfig_swigregister", SWConfig_swigregister, METH_VARARGS },
	 { (char *)"SWMgr_findConfig", _wrap_SWMgr_findConfig, METH_VARARGS },
	 { (char *)"SWMgr_config_set", _wrap_SWMgr_config_set, METH_VARARGS },
	 { (char *)"SWMgr_config_get", _wrap_SWMgr_config_get, METH_VARARGS },
	 { (char *)"SWMgr_sysconfig_set", _wrap_SWMgr_sysconfig_set, METH_VARARGS },
	 { (char *)"SWMgr_sysconfig_get", _wrap_SWMgr_sysconfig_get, METH_VARARGS },
	 { (char *)"SWMgr_Modules_set", _wrap_SWMgr_Modules_set, METH_VARARGS },
	 { (char *)"SWMgr_Modules_get", _wrap_SWMgr_Modules_get, METH_VARARGS },
	 { (char *)"SWMgr_prefixPath_set", _wrap_SWMgr_prefixPath_set, METH_VARARGS },
	 { (char *)"SWMgr_prefixPath_get", _wrap_SWMgr_prefixPath_get, METH_VARARGS },
	 { (char *)"SWMgr_configPath_set", _wrap_SWMgr_configPath_set, METH_VARARGS },
	 { (char *)"SWMgr_configPath_get", _wrap_SWMgr_configPath_get, METH_VARARGS },
	 { (char *)"new_SWMgr", _wrap_new_SWMgr, METH_VARARGS },
	 { (char *)"delete_SWMgr", _wrap_delete_SWMgr, METH_VARARGS },
	 { (char *)"SWMgr_Load", _wrap_SWMgr_Load, METH_VARARGS },
	 { (char *)"SWMgr_setGlobalOption", _wrap_SWMgr_setGlobalOption, METH_VARARGS },
	 { (char *)"SWMgr_getGlobalOption", _wrap_SWMgr_getGlobalOption, METH_VARARGS },
	 { (char *)"SWMgr_getGlobalOptionTip", _wrap_SWMgr_getGlobalOptionTip, METH_VARARGS },
	 { (char *)"SWMgr_getGlobalOptions", _wrap_SWMgr_getGlobalOptions, METH_VARARGS },
	 { (char *)"SWMgr_getGlobalOptionValues", _wrap_SWMgr_getGlobalOptionValues, METH_VARARGS },
	 { (char *)"SWMgr_setCipherKey", _wrap_SWMgr_setCipherKey, METH_VARARGS },
	 { (char *)"SWMgr_module", _wrap_SWMgr_module, METH_VARARGS },
	 { (char *)"SWMgr_swigregister", SWMgr_swigregister, METH_VARARGS },
	 { (char *)"SWModule_terminateSearch_set", _wrap_SWModule_terminateSearch_set, METH_VARARGS },
	 { (char *)"SWModule_terminateSearch_get", _wrap_SWModule_terminateSearch_get, METH_VARARGS },
	 { (char *)"new_SWModule", _wrap_new_SWModule, METH_VARARGS },
	 { (char *)"SWModule_Error", _wrap_SWModule_Error, METH_VARARGS },
	 { (char *)"SWModule_isUnicode", _wrap_SWModule_isUnicode, METH_VARARGS },
	 { (char *)"SWModule_getConfig", _wrap_SWModule_getConfig, METH_VARARGS },
	 { (char *)"SWModule_getConfigEntry", _wrap_SWModule_getConfigEntry, METH_VARARGS },
	 { (char *)"SWModule_SetKey", _wrap_SWModule_SetKey, METH_VARARGS },
	 { (char *)"SWModule_Key", _wrap_SWModule_Key, METH_VARARGS },
	 { (char *)"SWModule_CreateKey", _wrap_SWModule_CreateKey, METH_VARARGS },
	 { (char *)"SWModule_KeyText", _wrap_SWModule_KeyText, METH_VARARGS },
	 { (char *)"SWModule_Display", _wrap_SWModule_Display, METH_VARARGS },
	 { (char *)"SWModule_nullPercent", _wrap_SWModule_nullPercent, METH_VARARGS },
	 { (char *)"SWModule_Search", _wrap_SWModule_Search, METH_VARARGS },
	 { (char *)"SWModule_createSearchFramework", _wrap_SWModule_createSearchFramework, METH_VARARGS },
	 { (char *)"SWModule_hasSearchFramework", _wrap_SWModule_hasSearchFramework, METH_VARARGS },
	 { (char *)"SWModule_isSearchOptimallySupported", _wrap_SWModule_isSearchOptimallySupported, METH_VARARGS },
	 { (char *)"SWModule_next", _wrap_SWModule_next, METH_VARARGS },
	 { (char *)"SWModule_prev", _wrap_SWModule_prev, METH_VARARGS },
	 { (char *)"SWModule_inc", _wrap_SWModule_inc, METH_VARARGS },
	 { (char *)"SWModule_dec", _wrap_SWModule_dec, METH_VARARGS },
	 { (char *)"SWModule_setPosition", _wrap_SWModule_setPosition, METH_VARARGS },
	 { (char *)"SWModule_top", _wrap_SWModule_top, METH_VARARGS },
	 { (char *)"SWModule_bottom", _wrap_SWModule_bottom, METH_VARARGS },
	 { (char *)"SWModule_text", _wrap_SWModule_text, METH_VARARGS },
	 { (char *)"SWModule_StripText", _wrap_SWModule_StripText, METH_VARARGS },
	 { (char *)"SWModule_getRawEntry", _wrap_SWModule_getRawEntry, METH_VARARGS },
	 { (char *)"SWModule_setSkipConsecutiveLinks", _wrap_SWModule_setSkipConsecutiveLinks, METH_VARARGS },
	 { (char *)"SWModule_getSkipConsecutiveLinks", _wrap_SWModule_getSkipConsecutiveLinks, METH_VARARGS },
	 { (char *)"SWModule_getEntryAttributes", _wrap_SWModule_getEntryAttributes, METH_VARARGS },
	 { (char *)"SWModule_processEntryAttributes", _wrap_SWModule_processEntryAttributes, METH_VARARGS },
	 { (char *)"SWModule_isProcessEntryAttributes", _wrap_SWModule_isProcessEntryAttributes, METH_VARARGS },
	 { (char *)"SWModule_Name", _wrap_SWModule_Name, METH_VARARGS },
	 { (char *)"SWModule_Description", _wrap_SWModule_Description, METH_VARARGS },
	 { (char *)"SWModule_Type", _wrap_SWModule_Type, METH_VARARGS },
	 { (char *)"SWModule_Direction", _wrap_SWModule_Direction, METH_VARARGS },
	 { (char *)"SWModule_Encoding", _wrap_SWModule_Encoding, METH_VARARGS },
	 { (char *)"SWModule_Markup", _wrap_SWModule_Markup, METH_VARARGS },
	 { (char *)"SWModule_Lang", _wrap_SWModule_Lang, METH_VARARGS },
	 { (char *)"SWModule_isWritable", _wrap_SWModule_isWritable, METH_VARARGS },
	 { (char *)"SWModule_createModule", _wrap_SWModule_createModule, METH_VARARGS },
	 { (char *)"SWModule_setEntry", _wrap_SWModule_setEntry, METH_VARARGS },
	 { (char *)"SWModule_deleteEntry", _wrap_SWModule_deleteEntry, METH_VARARGS },
	 { (char *)"SWModule_write", _wrap_SWModule_write, METH_VARARGS },
	 { (char *)"SWModule_writeLink", _wrap_SWModule_writeLink, METH_VARARGS },
	 { (char *)"delete_SWModule", _wrap_delete_SWModule, METH_VARARGS },
	 { (char *)"SWModule_swigregister", SWModule_swigregister, METH_VARARGS },
	 { (char *)"new_SW_POSITION", _wrap_new_SW_POSITION, METH_VARARGS },
	 { (char *)"delete_SW_POSITION", _wrap_delete_SW_POSITION, METH_VARARGS },
	 { (char *)"SW_POSITION_swigregister", SW_POSITION_swigregister, METH_VARARGS },
	 { (char *)"new_SWKey", _wrap_new_SWKey, METH_VARARGS },
	 { (char *)"SWKey_clone", _wrap_SWKey_clone, METH_VARARGS },
	 { (char *)"SWKey_Persist", _wrap_SWKey_Persist, METH_VARARGS },
	 { (char *)"SWKey_setPersist", _wrap_SWKey_setPersist, METH_VARARGS },
	 { (char *)"SWKey_Error", _wrap_SWKey_Error, METH_VARARGS },
	 { (char *)"SWKey_setText", _wrap_SWKey_setText, METH_VARARGS },
	 { (char *)"SWKey_getText", _wrap_SWKey_getText, METH_VARARGS },
	 { (char *)"SWKey_getShortText", _wrap_SWKey_getShortText, METH_VARARGS },
	 { (char *)"SWKey_compare", _wrap_SWKey_compare, METH_VARARGS },
	 { (char *)"SWKey_equals", _wrap_SWKey_equals, METH_VARARGS },
	 { (char *)"SWKey_decrement", _wrap_SWKey_decrement, METH_VARARGS },
	 { (char *)"SWKey_increment", _wrap_SWKey_increment, METH_VARARGS },
	 { (char *)"SWKey_Traversable", _wrap_SWKey_Traversable, METH_VARARGS },
	 { (char *)"SWKey_Index", _wrap_SWKey_Index, METH_VARARGS },
	 { (char *)"SWKey_next", _wrap_SWKey_next, METH_VARARGS },
	 { (char *)"SWKey_prev", _wrap_SWKey_prev, METH_VARARGS },
	 { (char *)"SWKey_setKey", _wrap_SWKey_setKey, METH_VARARGS },
	 { (char *)"delete_SWKey", _wrap_delete_SWKey, METH_VARARGS },
	 { (char *)"SWKey_swigregister", SWKey_swigregister, METH_VARARGS },
	 { (char *)"new_VerseKey", _wrap_new_VerseKey, METH_VARARGS },
	 { (char *)"delete_VerseKey", _wrap_delete_VerseKey, METH_VARARGS },
	 { (char *)"VerseKey_clone", _wrap_VerseKey_clone, METH_VARARGS },
	 { (char *)"VerseKey_LowerBound", _wrap_VerseKey_LowerBound, METH_VARARGS },
	 { (char *)"VerseKey_UpperBound", _wrap_VerseKey_UpperBound, METH_VARARGS },
	 { (char *)"VerseKey_ClearBounds", _wrap_VerseKey_ClearBounds, METH_VARARGS },
	 { (char *)"VerseKey_decrement", _wrap_VerseKey_decrement, METH_VARARGS },
	 { (char *)"VerseKey_increment", _wrap_VerseKey_increment, METH_VARARGS },
	 { (char *)"VerseKey_Traversable", _wrap_VerseKey_Traversable, METH_VARARGS },
	 { (char *)"VerseKey_getBookName", _wrap_VerseKey_getBookName, METH_VARARGS },
	 { (char *)"VerseKey_getBookAbbrev", _wrap_VerseKey_getBookAbbrev, METH_VARARGS },
	 { (char *)"VerseKey_Testament", _wrap_VerseKey_Testament, METH_VARARGS },
	 { (char *)"VerseKey_Book", _wrap_VerseKey_Book, METH_VARARGS },
	 { (char *)"VerseKey_Chapter", _wrap_VerseKey_Chapter, METH_VARARGS },
	 { (char *)"VerseKey_Verse", _wrap_VerseKey_Verse, METH_VARARGS },
	 { (char *)"VerseKey_Normalize", _wrap_VerseKey_Normalize, METH_VARARGS },
	 { (char *)"VerseKey_AutoNormalize", _wrap_VerseKey_AutoNormalize, METH_VARARGS },
	 { (char *)"VerseKey_Headings", _wrap_VerseKey_Headings, METH_VARARGS },
	 { (char *)"VerseKey_getOSISRef", _wrap_VerseKey_getOSISRef, METH_VARARGS },
	 { (char *)"VerseKey_compare", _wrap_VerseKey_compare, METH_VARARGS },
	 { (char *)"VerseKey__compare", _wrap_VerseKey__compare, METH_VARARGS },
	 { (char *)"VerseKey_setLocale", _wrap_VerseKey_setLocale, METH_VARARGS },
	 { (char *)"VerseKey_getLocale", _wrap_VerseKey_getLocale, METH_VARARGS },
	 { (char *)"VerseKey_swigregister", VerseKey_swigregister, METH_VARARGS },
	 { (char *)"new_ListKey", _wrap_new_ListKey, METH_VARARGS },
	 { (char *)"delete_ListKey", _wrap_delete_ListKey, METH_VARARGS },
	 { (char *)"ListKey_clone", _wrap_ListKey_clone, METH_VARARGS },
	 { (char *)"ListKey_ClearList", _wrap_ListKey_ClearList, METH_VARARGS },
	 { (char *)"ListKey_Count", _wrap_ListKey_Count, METH_VARARGS },
	 { (char *)"ListKey_Remove", _wrap_ListKey_Remove, METH_VARARGS },
	 { (char *)"ListKey_SetToElement", _wrap_ListKey_SetToElement, METH_VARARGS },
	 { (char *)"ListKey_GetElement", _wrap_ListKey_GetElement, METH_VARARGS },
	 { (char *)"ListKey_add", _wrap_ListKey_add, METH_VARARGS },
	 { (char *)"ListKey_copyFrom", _wrap_ListKey_copyFrom, METH_VARARGS },
	 { (char *)"ListKey_setPosition", _wrap_ListKey_setPosition, METH_VARARGS },
	 { (char *)"ListKey_decrement", _wrap_ListKey_decrement, METH_VARARGS },
	 { (char *)"ListKey_increment", _wrap_ListKey_increment, METH_VARARGS },
	 { (char *)"ListKey_Traversable", _wrap_ListKey_Traversable, METH_VARARGS },
	 { (char *)"ListKey_Index", _wrap_ListKey_Index, METH_VARARGS },
	 { (char *)"ListKey_swigregister", ListKey_swigregister, METH_VARARGS },
	 { (char *)"TreeKey_getLocalName", _wrap_TreeKey_getLocalName, METH_VARARGS },
	 { (char *)"TreeKey_setLocalName", _wrap_TreeKey_setLocalName, METH_VARARGS },
	 { (char *)"TreeKey_getUserData", _wrap_TreeKey_getUserData, METH_VARARGS },
	 { (char *)"TreeKey_setUserData", _wrap_TreeKey_setUserData, METH_VARARGS },
	 { (char *)"TreeKey_getFullName", _wrap_TreeKey_getFullName, METH_VARARGS },
	 { (char *)"TreeKey_root", _wrap_TreeKey_root, METH_VARARGS },
	 { (char *)"TreeKey_parent", _wrap_TreeKey_parent, METH_VARARGS },
	 { (char *)"TreeKey_firstChild", _wrap_TreeKey_firstChild, METH_VARARGS },
	 { (char *)"TreeKey_nextSibling", _wrap_TreeKey_nextSibling, METH_VARARGS },
	 { (char *)"TreeKey_previousSibling", _wrap_TreeKey_previousSibling, METH_VARARGS },
	 { (char *)"TreeKey_hasChildren", _wrap_TreeKey_hasChildren, METH_VARARGS },
	 { (char *)"TreeKey_append", _wrap_TreeKey_append, METH_VARARGS },
	 { (char *)"TreeKey_appendChild", _wrap_TreeKey_appendChild, METH_VARARGS },
	 { (char *)"TreeKey_insertBefore", _wrap_TreeKey_insertBefore, METH_VARARGS },
	 { (char *)"TreeKey_remove", _wrap_TreeKey_remove, METH_VARARGS },
	 { (char *)"TreeKey_setOffset", _wrap_TreeKey_setOffset, METH_VARARGS },
	 { (char *)"TreeKey_getOffset", _wrap_TreeKey_getOffset, METH_VARARGS },
	 { (char *)"TreeKey_setPosition", _wrap_TreeKey_setPosition, METH_VARARGS },
	 { (char *)"TreeKey_Traversable", _wrap_TreeKey_Traversable, METH_VARARGS },
	 { (char *)"TreeKey_Index", _wrap_TreeKey_Index, METH_VARARGS },
	 { (char *)"TreeKey_swigregister", TreeKey_swigregister, METH_VARARGS },
	 { (char *)"TreeKeyIdx_swigregister", TreeKeyIdx_swigregister, METH_VARARGS },
	 { (char *)"new_LocaleMgr", _wrap_new_LocaleMgr, METH_VARARGS },
	 { (char *)"delete_LocaleMgr", _wrap_delete_LocaleMgr, METH_VARARGS },
	 { (char *)"LocaleMgr_getLocale", _wrap_LocaleMgr_getLocale, METH_VARARGS },
	 { (char *)"LocaleMgr_getAvailableLocales", _wrap_LocaleMgr_getAvailableLocales, METH_VARARGS },
	 { (char *)"LocaleMgr_getDefaultLocaleName", _wrap_LocaleMgr_getDefaultLocaleName, METH_VARARGS },
	 { (char *)"LocaleMgr_setDefaultLocaleName", _wrap_LocaleMgr_setDefaultLocaleName, METH_VARARGS },
	 { (char *)"LocaleMgr_systemLocaleMgr", _wrap_LocaleMgr_systemLocaleMgr, METH_VARARGS },
	 { (char *)"LocaleMgr_swigregister", LocaleMgr_swigregister, METH_VARARGS },
	 { (char *)"SWFilterMgr_swigregister", SWFilterMgr_swigregister, METH_VARARGS },
	 { (char *)"new_SWText", _wrap_new_SWText, METH_VARARGS },
	 { (char *)"delete_SWText", _wrap_delete_SWText, METH_VARARGS },
	 { (char *)"SWText_swigregister", SWText_swigregister, METH_VARARGS },
	 { (char *)"new_RawText", _wrap_new_RawText, METH_VARARGS },
	 { (char *)"RawText_createModule", _wrap_RawText_createModule, METH_VARARGS },
	 { (char *)"delete_RawText", _wrap_delete_RawText, METH_VARARGS },
	 { (char *)"RawText_swigregister", RawText_swigregister, METH_VARARGS },
	 { (char *)"new_zText", _wrap_new_zText, METH_VARARGS },
	 { (char *)"delete_zText", _wrap_delete_zText, METH_VARARGS },
	 { (char *)"zText_createModule", _wrap_zText_createModule, METH_VARARGS },
	 { (char *)"zText_swigregister", zText_swigregister, METH_VARARGS },
	 { (char *)"SWCom_swigregister", SWCom_swigregister, METH_VARARGS },
	 { (char *)"RawCom_swigregister", RawCom_swigregister, METH_VARARGS },
	 { (char *)"zCom_swigregister", zCom_swigregister, METH_VARARGS },
	 { (char *)"SWGenBook_swigregister", SWGenBook_swigregister, METH_VARARGS },
	 { (char *)"new_RawGenBook", _wrap_new_RawGenBook, METH_VARARGS },
	 { (char *)"delete_RawGenBook", _wrap_delete_RawGenBook, METH_VARARGS },
	 { (char *)"RawGenBook_createModule", _wrap_RawGenBook_createModule, METH_VARARGS },
	 { (char *)"RawGenBook_swigregister", RawGenBook_swigregister, METH_VARARGS },
	 { (char *)"new_SWLD", _wrap_new_SWLD, METH_VARARGS },
	 { (char *)"delete_SWLD", _wrap_delete_SWLD, METH_VARARGS },
	 { (char *)"SWLD_swigregister", SWLD_swigregister, METH_VARARGS },
	 { (char *)"new_RawLD", _wrap_new_RawLD, METH_VARARGS },
	 { (char *)"delete_RawLD", _wrap_delete_RawLD, METH_VARARGS },
	 { (char *)"RawLD_createModule", _wrap_RawLD_createModule, METH_VARARGS },
	 { (char *)"RawLD_swigregister", RawLD_swigregister, METH_VARARGS },
	 { (char *)"new_RawLD4", _wrap_new_RawLD4, METH_VARARGS },
	 { (char *)"delete_RawLD4", _wrap_delete_RawLD4, METH_VARARGS },
	 { (char *)"RawLD4_createModule", _wrap_RawLD4_createModule, METH_VARARGS },
	 { (char *)"RawLD4_swigregister", RawLD4_swigregister, METH_VARARGS },
	 { (char *)"new_zLD", _wrap_new_zLD, METH_VARARGS },
	 { (char *)"delete_zLD", _wrap_delete_zLD, METH_VARARGS },
	 { (char *)"zLD_createModule", _wrap_zLD_createModule, METH_VARARGS },
	 { (char *)"zLD_swigregister", zLD_swigregister, METH_VARARGS },
	 { (char *)"new_SWCompress", _wrap_new_SWCompress, METH_VARARGS },
	 { (char *)"delete_SWCompress", _wrap_delete_SWCompress, METH_VARARGS },
	 { (char *)"SWCompress_Buf", _wrap_SWCompress_Buf, METH_VARARGS },
	 { (char *)"SWCompress_zBuf", _wrap_SWCompress_zBuf, METH_VARARGS },
	 { (char *)"SWCompress_GetChars", _wrap_SWCompress_GetChars, METH_VARARGS },
	 { (char *)"SWCompress_SendChars", _wrap_SWCompress_SendChars, METH_VARARGS },
	 { (char *)"SWCompress_Encode", _wrap_SWCompress_Encode, METH_VARARGS },
	 { (char *)"SWCompress_Decode", _wrap_SWCompress_Decode, METH_VARARGS },
	 { (char *)"SWCompress_swigregister", SWCompress_swigregister, METH_VARARGS },
	 { (char *)"new_LZSSCompress", _wrap_new_LZSSCompress, METH_VARARGS },
	 { (char *)"delete_LZSSCompress", _wrap_delete_LZSSCompress, METH_VARARGS },
	 { (char *)"LZSSCompress_Encode", _wrap_LZSSCompress_Encode, METH_VARARGS },
	 { (char *)"LZSSCompress_Decode", _wrap_LZSSCompress_Decode, METH_VARARGS },
	 { (char *)"LZSSCompress_swigregister", LZSSCompress_swigregister, METH_VARARGS },
	 { (char *)"new_ZipCompress", _wrap_new_ZipCompress, METH_VARARGS },
	 { (char *)"delete_ZipCompress", _wrap_delete_ZipCompress, METH_VARARGS },
	 { (char *)"ZipCompress_Encode", _wrap_ZipCompress_Encode, METH_VARARGS },
	 { (char *)"ZipCompress_Decode", _wrap_ZipCompress_Decode, METH_VARARGS },
	 { (char *)"ZipCompress_swigregister", ZipCompress_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_zComTo_p_SWCom(void *x) {
    return (void *)((SWCom *)  ((zCom *) x));
}
static void *_p_RawComTo_p_SWCom(void *x) {
    return (void *)((SWCom *)  ((RawCom *) x));
}
static void *_p_TreeKeyIdxTo_p_TreeKey(void *x) {
    return (void *)((TreeKey *)  ((TreeKeyIdx *) x));
}
static void *_p_RawTextTo_p_SWText(void *x) {
    return (void *)((SWText *)  ((RawText *) x));
}
static void *_p_zTextTo_p_SWText(void *x) {
    return (void *)((SWText *)  ((zText *) x));
}
static void *_p_ListKeyTo_p_SWKey(void *x) {
    return (void *)((SWKey *)  ((ListKey *) x));
}
static void *_p_TreeKeyIdxTo_p_SWKey(void *x) {
    return (void *)((SWKey *) (TreeKey *) ((TreeKeyIdx *) x));
}
static void *_p_VerseKeyTo_p_SWKey(void *x) {
    return (void *)((SWKey *)  ((VerseKey *) x));
}
static void *_p_TreeKeyTo_p_SWKey(void *x) {
    return (void *)((SWKey *)  ((TreeKey *) x));
}
static void *_p_LZSSCompressTo_p_SWCompress(void *x) {
    return (void *)((SWCompress *)  ((LZSSCompress *) x));
}
static void *_p_ZipCompressTo_p_SWCompress(void *x) {
    return (void *)((SWCompress *)  ((ZipCompress *) x));
}
static void *_p_SWComTo_p_SWModule(void *x) {
    return (void *)((SWModule *)  ((SWCom *) x));
}
static void *_p_zLDTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWLD *) ((zLD *) x));
}
static void *_p_SWTextTo_p_SWModule(void *x) {
    return (void *)((SWModule *)  ((SWText *) x));
}
static void *_p_SWGenBookTo_p_SWModule(void *x) {
    return (void *)((SWModule *)  ((SWGenBook *) x));
}
static void *_p_RawGenBookTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWGenBook *) ((RawGenBook *) x));
}
static void *_p_RawTextTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWText *) ((RawText *) x));
}
static void *_p_zComTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWCom *) ((zCom *) x));
}
static void *_p_RawLD4To_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWLD *) ((RawLD4 *) x));
}
static void *_p_zTextTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWText *) ((zText *) x));
}
static void *_p_RawComTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWCom *) ((RawCom *) x));
}
static void *_p_SWLDTo_p_SWModule(void *x) {
    return (void *)((SWModule *)  ((SWLD *) x));
}
static void *_p_RawLDTo_p_SWModule(void *x) {
    return (void *)((SWModule *) (SWLD *) ((RawLD *) x));
}
static void *_p_RawGenBookTo_p_SWGenBook(void *x) {
    return (void *)((SWGenBook *)  ((RawGenBook *) x));
}
static void *_p_zLDTo_p_SWLD(void *x) {
    return (void *)((SWLD *)  ((zLD *) x));
}
static void *_p_RawLD4To_p_SWLD(void *x) {
    return (void *)((SWLD *)  ((RawLD4 *) x));
}
static void *_p_RawLDTo_p_SWLD(void *x) {
    return (void *)((SWLD *)  ((RawLD *) x));
}
static swig_type_info _swigt__p_SWLocale[] = {{"_p_SWLocale", 0, "SWLocale *", 0},{"_p_SWLocale"},{0}};
static swig_type_info _swigt__p_SWMgr[] = {{"_p_SWMgr", 0, "SWMgr *", 0},{"_p_SWMgr"},{0}};
static swig_type_info _swigt__p_SWCom[] = {{"_p_SWCom", 0, "SWCom *", 0},{"_p_zCom", _p_zComTo_p_SWCom},{"_p_SWCom"},{"_p_RawCom", _p_RawComTo_p_SWCom},{0}};
static swig_type_info _swigt__p_RawLD4[] = {{"_p_RawLD4", 0, "RawLD4 *", 0},{"_p_RawLD4"},{0}};
static swig_type_info _swigt__p_ListKey[] = {{"_p_ListKey", 0, "ListKey *", 0},{"_p_ListKey"},{0}};
static swig_type_info _swigt__p_SWKey[] = {{"_p_SWKey", 0, "SWKey *", 0},{"_p_SWKey"},{"_p_ListKey", _p_ListKeyTo_p_SWKey},{"_p_TreeKeyIdx", _p_TreeKeyIdxTo_p_SWKey},{"_p_VerseKey", _p_VerseKeyTo_p_SWKey},{"_p_TreeKey", _p_TreeKeyTo_p_SWKey},{0}};
static swig_type_info _swigt__p_ConfigEntMap[] = {{"_p_ConfigEntMap", 0, "ConfigEntMap const &", 0},{"_p_ConfigEntMap"},{0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0},{"_p_p_char"},{0}};
static swig_type_info _swigt__p_RawLD[] = {{"_p_RawLD", 0, "RawLD *", 0},{"_p_RawLD"},{0}};
static swig_type_info _swigt__p_TreeKey[] = {{"_p_TreeKey", 0, "TreeKey *", 0},{"_p_TreeKeyIdx", _p_TreeKeyIdxTo_p_TreeKey},{"_p_TreeKey"},{0}};
static swig_type_info _swigt__p_bool[] = {{"_p_bool", 0, "bool *", 0},{"_p_bool"},{0}};
static swig_type_info _swigt__p_SWFilterMgr[] = {{"_p_SWFilterMgr", 0, "SWFilterMgr *", 0},{"_p_SWFilterMgr"},{0}};
static swig_type_info _swigt__p_SWLD[] = {{"_p_SWLD", 0, "SWLD *", 0},{"_p_zLD", _p_zLDTo_p_SWLD},{"_p_SWLD"},{"_p_RawLD4", _p_RawLD4To_p_SWLD},{"_p_RawLD", _p_RawLDTo_p_SWLD},{0}};
static swig_type_info _swigt__p_SWTextDirection[] = {{"_p_SWTextDirection", 0, "SWTextDirection *", 0},{"_p_SWTextDirection"},{0}};
static swig_type_info _swigt__p_RawText[] = {{"_p_RawText", 0, "RawText *", 0},{"_p_RawText"},{0}};
static swig_type_info _swigt__p_f_char_p_void__void[] = {{"_p_f_char_p_void__void", 0, "void (*)(char,void *)", 0},{"_p_f_char_p_void__void"},{0}};
static swig_type_info _swigt__p_VerseKey[] = {{"_p_VerseKey", 0, "VerseKey *", 0},{"_p_VerseKey"},{0}};
static swig_type_info _swigt__p_ModMap[] = {{"_p_ModMap", 0, "ModMap *", 0},{"_p_ModMap"},{0}};
static swig_type_info _swigt__p_zCom[] = {{"_p_zCom", 0, "zCom *", 0},{"_p_zCom"},{0}};
static swig_type_info _swigt__p_string[] = {{"_p_string", 0, "string *", 0},{"_p_string"},{0}};
static swig_type_info _swigt__p_SectionMap[] = {{"_p_SectionMap", 0, "SectionMap *", 0},{"_p_SectionMap"},{0}};
static swig_type_info _swigt__p_SWDisplay[] = {{"_p_SWDisplay", 0, "SWDisplay *", 0},{"_p_SWDisplay"},{0}};
static swig_type_info _swigt__p_AttributeTypeList[] = {{"_p_AttributeTypeList", 0, "AttributeTypeList *", 0},{"_p_AttributeTypeList"},{0}};
static swig_type_info _swigt__p_SWText[] = {{"_p_SWText", 0, "SWText *", 0},{"_p_SWText"},{"_p_RawText", _p_RawTextTo_p_SWText},{"_p_zText", _p_zTextTo_p_SWText},{0}};
static swig_type_info _swigt__p_TreeKeyIdx[] = {{"_p_TreeKeyIdx", 0, "TreeKeyIdx *", 0},{"_p_TreeKeyIdx"},{0}};
static swig_type_info _swigt__p_SWCompress[] = {{"_p_SWCompress", 0, "SWCompress *", 0},{"_p_SWCompress"},{"_p_LZSSCompress", _p_LZSSCompressTo_p_SWCompress},{"_p_ZipCompress", _p_ZipCompressTo_p_SWCompress},{0}};
static swig_type_info _swigt__p_LZSSCompress[] = {{"_p_LZSSCompress", 0, "LZSSCompress *", 0},{"_p_LZSSCompress"},{0}};
static swig_type_info _swigt__p_ZipCompress[] = {{"_p_ZipCompress", 0, "ZipCompress *", 0},{"_p_ZipCompress"},{0}};
static swig_type_info _swigt__p_SW_POSITION[] = {{"_p_SW_POSITION", 0, "SW_POSITION *", 0},{"_p_SW_POSITION"},{0}};
static swig_type_info _swigt__p_SWModule[] = {{"_p_SWModule", 0, "SWModule *", 0},{"_p_SWModule"},{"_p_SWGenBook", _p_SWGenBookTo_p_SWModule},{"_p_RawGenBook", _p_RawGenBookTo_p_SWModule},{"_p_SWText", _p_SWTextTo_p_SWModule},{"_p_RawText", _p_RawTextTo_p_SWModule},{"_p_zLD", _p_zLDTo_p_SWModule},{"_p_zCom", _p_zComTo_p_SWModule},{"_p_zText", _p_zTextTo_p_SWModule},{"_p_RawLD4", _p_RawLD4To_p_SWModule},{"_p_SWLD", _p_SWLDTo_p_SWModule},{"_p_RawLD", _p_RawLDTo_p_SWModule},{"_p_SWCom", _p_SWComTo_p_SWModule},{"_p_RawCom", _p_RawComTo_p_SWModule},{0}};
static swig_type_info _swigt__p_zLD[] = {{"_p_zLD", 0, "zLD *", 0},{"_p_zLD"},{0}};
static swig_type_info _swigt__p_SWGenBook[] = {{"_p_SWGenBook", 0, "SWGenBook *", 0},{"_p_SWGenBook"},{"_p_RawGenBook", _p_RawGenBookTo_p_SWGenBook},{0}};
static swig_type_info _swigt__p_RawCom[] = {{"_p_RawCom", 0, "RawCom *", 0},{"_p_RawCom"},{0}};
static swig_type_info _swigt__p_RawGenBook[] = {{"_p_RawGenBook", 0, "RawGenBook *", 0},{"_p_RawGenBook"},{0}};
static swig_type_info _swigt__p_SWConfig[] = {{"_p_SWConfig", 0, "SWConfig *", 0},{"_p_SWConfig"},{0}};
static swig_type_info _swigt__p_LocaleMgr[] = {{"_p_LocaleMgr", 0, "LocaleMgr *", 0},{"_p_LocaleMgr"},{0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0},{"_p_int"},{0}};
static swig_type_info _swigt__p_SWTextMarkup[] = {{"_p_SWTextMarkup", 0, "SWTextMarkup *", 0},{"_p_SWTextMarkup"},{0}};
static swig_type_info _swigt__p_OptionsList[] = {{"_p_OptionsList", 0, "OptionsList *", 0},{"_p_listTstring_t"},{"_p_OptionsList"},{0}};
static swig_type_info _swigt__p_listTstring_t[] = {{"_p_listTstring_t", 0, "list<string > *", 0},{"_p_listTstring_t"},{"_p_OptionsList"},{0}};
static swig_type_info _swigt__p_zText[] = {{"_p_zText", 0, "zText *", 0},{"_p_zText"},{0}};
static swig_type_info _swigt__p_SWTextEncoding[] = {{"_p_SWTextEncoding", 0, "SWTextEncoding *", 0},{"_p_SWTextEncoding"},{0}};
static swig_type_info _swigt__p_unsigned_long[] = {{"_p_unsigned_long", 0, "unsigned long *", 0},{"_p_unsigned_long"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_SWLocale, 
_swigt__p_SWMgr, 
_swigt__p_SWCom, 
_swigt__p_RawLD4, 
_swigt__p_ListKey, 
_swigt__p_SWKey, 
_swigt__p_ConfigEntMap, 
_swigt__p_p_char, 
_swigt__p_RawLD, 
_swigt__p_TreeKey, 
_swigt__p_bool, 
_swigt__p_SWFilterMgr, 
_swigt__p_SWLD, 
_swigt__p_SWTextDirection, 
_swigt__p_RawText, 
_swigt__p_f_char_p_void__void, 
_swigt__p_VerseKey, 
_swigt__p_ModMap, 
_swigt__p_zCom, 
_swigt__p_string, 
_swigt__p_SectionMap, 
_swigt__p_SWDisplay, 
_swigt__p_AttributeTypeList, 
_swigt__p_SWText, 
_swigt__p_TreeKeyIdx, 
_swigt__p_SWCompress, 
_swigt__p_LZSSCompress, 
_swigt__p_ZipCompress, 
_swigt__p_SW_POSITION, 
_swigt__p_SWModule, 
_swigt__p_zLD, 
_swigt__p_SWGenBook, 
_swigt__p_RawCom, 
_swigt__p_RawGenBook, 
_swigt__p_SWConfig, 
_swigt__p_LocaleMgr, 
_swigt__p_int, 
_swigt__p_SWTextMarkup, 
_swigt__p_OptionsList, 
_swigt__p_listTstring_t, 
_swigt__p_zText, 
_swigt__p_SWTextEncoding, 
_swigt__p_unsigned_long, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

